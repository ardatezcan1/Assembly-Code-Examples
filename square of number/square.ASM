ADR1			EQU 40H					; ADDRESS WHERE THE NUMBER TO BE SQUARED IS STORED (ADR1=
ADR2			EQU 50H					; ADDRESS WHERE THE SQUARE OF THE NUMBER IS STORED
RED_LED			EQU P1.0 				; IF SQUARE OF NUMBER>100, RED LED WILL LIGHT WITH ACTIVE LOGIC "1" (WITH SOURCE CURRENT)
GREEN_LED		EQU P1.1				; IF SQUARE OF THE NUMBERS<100, THE GREEN LED WILL ILLUMINATE WITH ACTIVE LOGIC "0" (WITH SINK CURRENT
YELLOW_LED		EQU P1.2				; IF SQUARE OF NUMBER=100, YELLOW LED WILL LIGHT WITH ACTIVE LOGIC "1" (WITH SOURCE CURRENT)

				ORG 0000H				; RESET START ADDRESS 
				LJMP ANA_PROG 			; GO TO MAIN PROGRAM WITH RESET
				
				ORG 0100H				; MAIN PROGRAM START ADDRESS
MAIN_PROG:		MOV P0,#0FFH			; REQUEST P0 AS INPUT ( ALL PORTS ARE ALREADY AUTOMATICALLY CONDITIONED AS INPUT BY RESET)
				MOV P1,#00H				; P1 AS OUTPUT	
				MOV A, P0				; READ 8 BIT KEY DATA AT P0 
				ANL A,#0FH				; RESET TOP 4 BITS OF NUMBER, KEEP BOTTOM 4 bits 00H<=N<=0FH
				MOV ADR1, A				; STORAGE/WRITE THE NUMBER TO SQUARE AT ADDRESS ADR1=40H
				LCALL SQUARE			; GO TO SQUARE SUBPROGRAM
				SJMP MAIN_PROG			; GO TO MAIN PROGRAM
				
				ORG 0300H				; SUB-PROGRAM THAT SQUARES THE NUMBER IN ADR1 AND STORES THE RESULT IN ADR2
SQUARE:		CLR RED_LED					; END RED LED WITH ACTIVE LOGIC "0"
				SETB GREEN_LED			; END GREEN LED WITH ACTIVE LOGIC "1"
				CLR YELLOW_LED			; END YELLOW LED WITH ACTIVE LOGIC "0"
				CLR C					; RESET HAND FLAG (CARRY FLAG)
				MOV A, ADR1				; THE NUMBER TO BE SQUARED IS LOADED TO A
				MOV B, A				; THE NUMBER TO BE SQUARED IS LOADED TO B (NOTE: MOV B CAN BE WRITTEN IN ADR1, BUT THIS IS A 3 B' 2 MC COMMAND!)
				MUL AB					; CARP A AND B (Since A=B=(ADR1), THE NUMBER IS SQUAREED)
				MOV ADR2, A				; SAVE/WRITE THE SQUARE OF THE NUMBER TO ADDRESS ADR2=50H
				CJNE A,#100, NOT_EQUAL	; A<>100(64H) GO TO ADDRESS NOT_EQUAL. IF A=100 (64H) CONTINUE TO BOTTOM LINE.
										; NOTE: HAND FLAG C=1 IF A<100 IF A>=100, C=0 
				SETB SARI_LED			; A=100 AND LIGHT THE YELLOW LED WITH ACTIVE LOGIC "1"
				RET						; BACK TO MAIN FROM SUB-PROGRAM
				
NOT_EQUAL:		JC GREEN_LED_LIGHT 		; IF C=1 (A<100) GO TO THE ADDRESS ON THE GREEN LED AND TURN ON THE GREEN LED
				SETB RED_LED			; C=0 ISE (A>100) LIGHT THE RED LED WITH ACTIVE LOGIC "1"
				RET						; BACK TO MAIN FROM SUB-PROGRAM
				
GREEN_LED_LIGHT:CLR GREEN_LED			; GREEN LED ON WITH ACTIVE LOGIC "0"
				RET						; BACK TO MAIN FROM SUB-PROGRAM
				END